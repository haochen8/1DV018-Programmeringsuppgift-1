/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass.set("bench.UFBenchmark")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Modified helper function
fun createSystemProperties(project: Project, keys: List<String>): Map<String, String> {
    return keys.mapNotNull { k ->
        val value = (project.findProperty(k) ?: System.getProperty(k))?.toString()
        if (!value.isNullOrBlank()) k to value else null
    }.toMap()
}

tasks.named<JavaExec>("run") {
    val keys = listOf(
        "scenario", "Ns", "unionRatio", "opsPerN", "opsFactor",
        "reps", "seeds", "printHeader", "gcBetweenReps"
    )
    systemProperties(createSystemProperties(project, keys))
}

tasks.register<JavaExec>("runThreeSumBench") {
    group = "application"
    description = "Run ThreeSumBenchmark with forwarded system properties"
    mainClass.set("bench.ThreeSumBenchmark")
    classpath = sourceSets["main"].runtimeClasspath

    val keys = listOf(
        // common
        "scenario", "printHeader", "gcBetweenReps", "reps", "seeds",
        // dataset
        "minVal", "maxVal", "dupRatio",
        // sizes
        "NsBF", "NsTP"
    )
    systemProperties(createSystemProperties(project, keys))
}
